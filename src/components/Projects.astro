<div class="project">
	<h3>Mosgi - League of Legends Data Analysis Site</h3>
	<p>
		A high-performance, full-stack League of Legends analytics platform built with Next.js,
		React, and Tailwind CSS. Features comprehensive player statistics, match history lookup,
		champion/item performance analysis, and AI-powered recommendations.
		Leverages the official Riot API and a highly optimized MySQL backend architected for 
		sub-second complex queries on billions of rows, ensuring a fast, scalable, and responsive 
		user experience.
	</p>
	<code>Next.js</code> <code>React</code> <code>Tailwind CSS</code> <code>MySQL</code> <code>AI</code> <code>Machine Learing</code> <code>Riot API</code>
	<div class="project-links">
		<a href="https://mosgi.org/" target="_blank" rel="noopener noreferrer" class="button">View Site</a>
		<a href="https://github.com/Seiori/Mosgi" target="_blank" rel="noopener noreferrer" class="button">View Code</a>
	</div>
</div>
<div class="project">
	<h3>MySQL Bulk Operations - Extension Methods for EFCore</h3>
	<p>
		A C# library enhancing Entity Framework Core for MySQL,
		providing high-performance extension methods for bulk Insert, 
		Update, and Upsert operations. Significantly improves performance
		and simplifies code by utilizing temporary tables and intelligently
		handling dynamic entities, including automatic foreign key propagation
		and cascading operations for related data.
	</p>
	<code>C#</code> <code>MySQL</code> <code>Entity Framework Core</code>
	<div class="project-links">
		<a href="https://github.com/Seiori/MySql-Bulk-Operations" target="_blank" rel="noopener noreferrer" class="button">View Code</a>
	</div>
</div>
<div class="project">
	<h3>Statikk-Scraper - Riot API Data Gathering Tool</h3>
	<p>
		A robust C# application engineered for efficiently collecting large-scale
		League of Legends data from the Riot API. It processes approximately 1 million
		ranked matches daily across major regions, leveraging EF Core and custom
		MySQL Bulk Extensions for high-speed data insertion into a MySQL database. 
		This critical data pipeline powers the Mosgi analytics website.
	</p>
	<code>C#</code> <code>MySQL</code> <code>Entity Framework Core</code> <code>Riot API</code> <code>Data Pipeline</code> <code>MySQL Bulk Operations</code>
	<div class="project-links">
		<a href="https://github.com/Seiori/Statikk-Scraper" target="_blank" rel="noopener noreferrer" class="button">View Code</a>
	</div>
</div>
<div class="project">
	<h3>Project Nesja - League of Legends Data Analysis Application</h3>
	<p>
		A native Windows desktop application built with C# and Windows Forms, 
		delivering the core League of Legends data analysis features found on 
		the Mosgi website (player stats, match history, performance metrics). 
		Provides a fast, responsive, and user-friendly interface for users who 
		prefer analyzing game data in a dedicated desktop environment.
	</p>
	<code>C#</code> <code>Windows Forms</code>
	<div class="project-links">
		<a href="https://github.com/Seiori/Project-Nesja" target="_blank" rel="noopener noreferrer" class="button">View Code</a>
	</div>
</div>
<div class="project">
	<h3>Comparative Particle Simulation (C++/Rust/Go Learning Benchmark)</h3>
	<p>
		Developed identical physics-based particle simulations in C++, Rust, 
		and Go as both a personal method for learning these languages and a 
		practical benchmark for comparison. Each version models three RGB 
		spray cans applying paint to a canvas, simulating realistic particle 
		physics (velocity, gravity, drag) and color blending. The final 2D 
		image output allows for direct comparison of language performance 
		and development characteristics.
	</p>
	<code>C++</code> <code>Rust</code> <code>Go</code>
	<div class="project-links">
		<a href="https://github.com/Seiori/Projectile-Motion-C--" target="_blank" rel="noopener noreferrer" class="button">View C++ Code</a>
		<a href="https://github.com/Seiori/Projectile-Motion-Rust" target="_blank" rel="noopener noreferrer" class="button">View Rust Code</a>
	</div>
</div>

<style>
	.project {
		margin-bottom: 2.5em;
		padding: 20px;
        padding-left: 25px;
		border-left: 4px solid;
		border-image: var(--accent-gradient) 1;
		position: relative;
        background-color: rgba(248, 249, 250, 0.5);
        border-radius: 0 8px 8px 0;
        transition: transform 0.2s ease, box-shadow 0.2s ease, border-image 0.3s ease;
	}
    .project:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.07);
        border-image: linear-gradient(83.21deg, var(--accent-secondary) 0%, var(--accent-primary) 100%) 1;
    }
	.project:last-child {
		margin-bottom: 0;
	}

	h3 {
		font-size: 1.3rem;
		margin-top: 0;
		margin-bottom: 0.6em;
		color: var(--text-primary);
		transition: color 0.2s ease;
	}
    .project:hover h3 {
        color: var(--accent-primary);
    }

	p {
		color: var(--text-secondary);
		font-size: 1rem;
		line-height: 1.7;
		margin: 0 0 1.2em;
		max-width: 70ch;
	}

	code {
		display: inline-block;
		background: rgba(188, 82, 238, 0.1);
		border-radius: 4px;
		border: 1px solid rgba(188, 82, 238, 0.2);
		padding: 3px 6px;
		font-size: 0.9em;
		font-family: 'Roboto Mono', monospace;
		color: #8a3db8;
		margin: 3px 3px 3px 0;
	}

    .project-links {
        margin-top: 1em;
        display: flex;
        gap: 15px;
        flex-wrap: wrap;
    }

	.project-links a.button {
		font-size: 0.9rem;
        padding: 8px 16px;
	}
</style>